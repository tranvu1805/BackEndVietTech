window.OneSignalDeferred = window.OneSignalDeferred || [];

OneSignalDeferred.push(async (OneSignal) => {
    try {
        // Kh·ªüi t·∫°o OneSignal
        await OneSignal.init({
            appId: "29ae4e65-bafd-49fb-8c3b-cde54d2bf2bb",
            notifyButton: { enable: true }, // Hi·ªÉn th·ªã n√∫t th√¥ng b√°o
            serviceWorkerPath: "/OneSignalSDKWorker.js", // ƒê∆∞·ªùng d·∫´n ƒë·∫øn service worker
        });

        console.log("‚úÖ ƒê√£ kh·ªüi t·∫°o OneSignal");

        // Ch·ªù 1 gi√¢y ƒë·ªÉ ƒë·∫£m b·∫£o OneSignal s·∫µn s√†ng
        await new Promise(resolve => setTimeout(resolve, 1000));

        // Ki·ªÉm tra t√≠nh kh·∫£ d·ª•ng
        if (!OneSignal.User) {
            console.warn("‚ö†Ô∏è OneSignal.User kh√¥ng kh·∫£ d·ª•ng", OneSignal);
            return;
        }

        console.log("C√°c thu·ªôc t√≠nh c√≥ s·∫µn c·ªßa OneSignal.User:", Object.keys(OneSignal.User));

        if (!OneSignal.User.PushSubscription) {
            console.warn("‚ö†Ô∏è OneSignal.User.PushSubscription kh√¥ng kh·∫£ d·ª•ng");
            console.log("C√°c thu·ªôc t√≠nh c√≥ s·∫µn c·ªßa OneSignal.User:", Object.keys(OneSignal.User));
            return;
        }

        const subscription = OneSignal.User.PushSubscription;

        // Ghi log c√°c thu·ªôc t√≠nh c·ªßa subscription ƒë·ªÉ ki·ªÉm tra
        console.log("C√°c thu·ªôc t√≠nh c·ªßa subscription:", Object.keys(subscription));

        // Ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng k√Ω b·∫±ng thu·ªôc t√≠nh optedIn
        const daDangKy = subscription.optedIn;
        console.log("üì¶ ƒê√£ ƒëƒÉng k√Ω:", daDangKy);

        if (daDangKy) {
            await xuLyDangKy(OneSignal);
        }

        // L·∫Øng nghe s·ª± thay ƒë·ªïi ƒëƒÉng k√Ω
        subscription.addEventListener("change", async (event) => {
            console.log("üîî Tr·∫°ng th√°i ƒëƒÉng k√Ω thay ƒë·ªïi:", event.current.optedIn);
            if (event.current.optedIn) {
                await xuLyDangKy(OneSignal);
            }
        });

    } catch (error) {
        console.error("‚ùå L·ªói trong lu·ªìng OneSignal:", error);
    }
});

/**
 * X·ª≠ l√Ω khi ng∆∞·ªùi d√πng ƒëƒÉng k√Ω th√¥ng b√°o
 * @param {Object} OneSignal - Instance c·ªßa OneSignal
 */
async function xuLyDangKy(OneSignal) {
    try {
        const oneSignalId = OneSignal.User._currentUser?.onesignalId;
        if (!oneSignalId) {
            console.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y OneSignal ID");
            return;
        }

        const userId = localStorage.getItem("userId");
        const role = localStorage.getItem("role") || "user";

        console.log("üéØ OneSignal ID:", oneSignalId);
        console.log("üîñ G√°n tags:", { externalUserId: userId, role });

        await OneSignal.User.addTags({
            externalUserId: userId,
            role: role.toLowerCase() === "admin" ? "admin" : "user",
        });
        console.log("ƒê√£ g√°n tags cho OneSignal ID:", OneSignal.User);
        const tags = await OneSignal.User.getTags();
        console.log("üîñ Tags hi·ªán t·∫°i:", tags);

        await guiIdDenServer(oneSignalId);
    } catch (error) {
        console.error("‚ùå L·ªói khi x·ª≠ l√Ω ƒëƒÉng k√Ω:", error);
    }
}


/**
 * G·ª≠i ID ng∆∞·ªùi d√πng ƒë·∫øn server
 * @param {string} userId - ID OneSignal c·ªßa ng∆∞·ªùi d√πng
 */
async function guiIdDenServer(userId) {
    const accessToken = localStorage.getItem('accessToken');
    const userIds = localStorage.getItem('userId');
    const apiKey = 'c244dcd1532c91ab98a1c028e4f24f81457cdb2ac83e2ca422d36046fec84233589a4b51eda05e24d8871f73653708e3b13cf6dd1415a6330eaf6707217ef683'
    try {
        const response = await fetch('/v1/api/admin/onesignal/save-player-id', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                authorization: accessToken,
                'x-client-id': userIds,
                'x-api-key': apiKey
            },
            body: JSON.stringify({ oneSignalId: userId }),
        });

        if (!response.ok) {
            throw new Error(`L·ªói HTTP! tr·∫°ng th√°i: ${response.status}`);
        }

        const data = await response.json();
        console.log("‚úÖ ƒê√£ g·ª≠i ƒë·∫øn server:", data);
    } catch (error) {
        console.error("‚ùå G·ª≠i ID th·∫•t b·∫°i:", error);
    }
}