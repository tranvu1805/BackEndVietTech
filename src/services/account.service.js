const accountModel = require("../models/account.model");
const roleModel = require("../models/role.model");
const bcrypt = require("bcrypt");
const crypto = require("crypto");
const keyTokenModel = require("../models/keytoken.model");
const { getInfoData } = require("../utils");
const { createToKenPair } = require("../auth/authUntils");

class AccountService {

    // ‚úÖ L·∫•y th√¥ng tin t√†i kho·∫£n theo ID
    static async getAccountById(accountId) {
        try {
            console.log("üìå L·∫•y th√¥ng tin t√†i kho·∫£n ID:", accountId);

            // T√¨m t√†i kho·∫£n theo ID
            const account = await accountModel.findById(accountId).select("-password");
            if (!account) {
                return { code: 404, message: "Account not found!", status: "error" };
            }

            return { code: 200, message: "Account found!", status: "success", data: account };
        } catch (error) {
            console.error("‚ùå L·ªói khi l·∫•y t√†i kho·∫£n:", error);
            return { code: 500, message: "Internal Server Error", status: "error" };
        }
    }

    // ‚úÖ C·∫≠p nh·∫≠t th√¥ng tin t√†i kho·∫£n
    static async updateAccount(accountId, updateData) {
        try {
            console.log("üìå C·∫≠p nh·∫≠t t√†i kho·∫£n ID:", accountId, "D·ªØ li·ªáu m·ªõi:", updateData);

            // N·∫øu c√≥ c·∫≠p nh·∫≠t m·∫≠t kh·∫©u, m√£ h√≥a l·∫°i tr∆∞·ªõc khi l∆∞u
            if (updateData.password) {
                updateData.password = await bcrypt.hash(updateData.password, 10);
            }

            // C·∫≠p nh·∫≠t t√†i kho·∫£n
            const updatedAccount = await accountModel.findByIdAndUpdate(accountId, updateData, { new: true }).select("-password");
            if (!updatedAccount) {
                return { code: 404, message: "Account not found!", status: "error" };
            }

            return { code: 200, message: "Account updated successfully!", status: "success", data: updatedAccount };
        } catch (error) {
            console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t t√†i kho·∫£n:", error);
            return { code: 500, message: "Internal Server Error", status: "error" };
        }
    }
    // ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i t√†i kho·∫£n
    static async updateAccountStatus(accountId, newStatus) {
        try {
            console.log("üìå B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t tr·∫°ng th√°i t√†i kho·∫£n:", accountId, "=>", newStatus);
    
            // Ki·ªÉm tra tr·∫°ng th√°i h·ª£p l·ªá
            const validStatuses = ["active", "inactive", "banned"];
            if (!validStatuses.includes(newStatus)) {
                console.warn("‚ö†Ô∏è Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá:", newStatus);
                return { code: 400, message: "Invalid status!", status: "error" };
            }
    
            // C·∫≠p nh·∫≠t tr·∫°ng th√°i t√†i kho·∫£n
            const updatedAccount = await accountModel.findByIdAndUpdate(
                accountId, 
                { status: newStatus }, 
                { new: true }
            ).select("-password");
    
            if (!updatedAccount) {
                console.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n ID:", accountId);
                return { code: 404, message: "Account not found!", status: "error" };
            }
    
            console.log("‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng! ID:", accountId, "Tr·∫°ng th√°i m·ªõi:", newStatus);
            return { code: 200, message: "Account status updated successfully!", status: "success", data: updatedAccount };
        } catch (error) {
            console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i t√†i kho·∫£n:", error);
            return { code: 500, message: "Internal Server Error", status: "error" };
        }
    }
    
}

module.exports = AccountService;
