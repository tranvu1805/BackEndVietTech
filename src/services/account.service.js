const crypto = require("crypto");
const keyTokenModel = require("../models/keytoken.model");
const { getInfoData } = require("../utils");
const { createToKenPair } = require("../auth/authUtils");
const accountModel = require('../models/account.model'); 

class AccountService {
  static async getAccountWithRoleById(accountId) {
    try {
      // T√¨m t√†i kho·∫£n theo ID v√† populate th√¥ng tin role
      const account = await accountModel
        .findById(accountId)
        .populate("role_id", "name") // Populate t√™n quy·ªÅn (role name)
        .select("-password");

      if (!account) {
        return { code: 404, message: "Account not found!", status: "error" };
      }

      return {
        code: 200,
        message: "Account found!",
        status: "success",
        data: {
          ...account.toObject(),
          role: account.role_id ? account.role_id.name : "No role", // Tr·∫£ v·ªÅ t√™n quy·ªÅn c·ªßa t√†i kho·∫£n
        },
      };
    } catch (error) {
      console.error("‚ùå L·ªói khi l·∫•y t√†i kho·∫£n:", error);
      return { code: 500, message: "Internal Server Error", status: "error" };
    }
  }


  // ‚úÖ C·∫≠p nh·∫≠t th√¥ng tin t√†i kho·∫£n
  static async updateAccount(accountId, updateData) {
    try {
      console.log(
        "üìå C·∫≠p nh·∫≠t t√†i kho·∫£n ID:",
        accountId,
        "D·ªØ li·ªáu m·ªõi:",
        updateData
      );

      // N·∫øu c√≥ c·∫≠p nh·∫≠t m·∫≠t kh·∫©u, m√£ h√≥a l·∫°i tr∆∞·ªõc khi l∆∞u
      if (updateData.password) {
        updateData.password = await bcrypt.hash(updateData.password, 10);
      }

      // C·∫≠p nh·∫≠t t√†i kho·∫£n
      const updatedAccount = await accountModel
        .findByIdAndUpdate(accountId, updateData, { new: true })
        .select("-password");
      if (!updatedAccount) {
        return { code: 404, message: "Account not found!", status: "error" };
      }

      return {
        code: 200,
        message: "Account updated successfully!",
        status: "success",
        data: updatedAccount,
      };
    } catch (error) {
      console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t t√†i kho·∫£n:", error);
      return { code: 500, message: "Internal Server Error", status: "error" };
    }
  }
  // ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i t√†i kho·∫£n
  static async updateAccountStatus(accountId, newStatus) {
    try {
      console.log(
        "üìå B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t tr·∫°ng th√°i t√†i kho·∫£n:",
        accountId,
        "=>",
        newStatus
      );

      // Ki·ªÉm tra tr·∫°ng th√°i h·ª£p l·ªá
      const validStatuses = ["active", "inactive", "banned"];
      if (!validStatuses.includes(newStatus)) {
        console.warn("‚ö†Ô∏è Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá:", newStatus);
        return { code: 400, message: "Invalid status!", status: "error" };
      }

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i t√†i kho·∫£n
      const updatedAccount = await accountModel
        .findByIdAndUpdate(accountId, { status: newStatus }, { new: true })
        .select("-password");

      if (!updatedAccount) {
        console.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n ID:", accountId);
        return { code: 404, message: "Account not found!", status: "error" };
      }

      console.log(
        "‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng! ID:",
        accountId,
        "Tr·∫°ng th√°i m·ªõi:",
        newStatus
      );
      return {
        code: 200,
        message: "Account status updated successfully!",
        status: "success",
        data: updatedAccount,
      };
    } catch (error) {
      console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i t√†i kho·∫£n:", error);
      return { code: 500, message: "Internal Server Error", status: "error" };
    }
  }
}

module.exports = AccountService;
