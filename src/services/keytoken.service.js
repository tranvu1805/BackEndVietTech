const { Types } = require("mongoose");
const keytokenModel = require("../models/keytoken.model");

class KeyTokenService {
    static async createKeyToken({ userId, publicKey, privateKey, refreshTokens }) {
        try {
            // üîç Ki·ªÉm tra n·∫øu refreshTokens l√† m·∫£ng trong m·∫£ng => C·∫ßn l√†m ph·∫≥ng m·∫£ng
            if (Array.isArray(refreshTokens) && refreshTokens.length > 0 && Array.isArray(refreshTokens[0])) {
                refreshTokens = refreshTokens.flat();
            }
    
            const existingKeyToken = await keytokenModel.findOne({ user: userId });
    
            if (existingKeyToken) {
                // C·∫≠p nh·∫≠t keyToken n·∫øu ƒë√£ t·ªìn t·∫°i
                await keytokenModel.updateOne(
                    { user: userId },
                    { 
                        $addToSet: { refreshTokens: { $each: refreshTokens } }, // ƒê·∫£m b·∫£o refreshTokens l√† m·∫£ng ƒë√∫ng
                        publicKey, 
                        privateKey 
                    }
                );
                return { message: "KeyToken updated successfully!" };
            } else {
                // T·∫°o m·ªõi keyToken
                const tokens = await keytokenModel.create({
                    user: userId,
                    publicKey,
                    privateKey,
                    refreshTokens: refreshTokens, // ƒê·∫£m b·∫£o truy·ªÅn v√†o ƒë√∫ng d·∫°ng ["token"]
                });
                return tokens;
            }
        } catch (error) {
            console.error("‚ùå [ERROR] createKeyToken:", error);
            return { error: error.message };
        }
    }
    
    static async removeRefreshToken(userId, refreshToken) {
        try {
            console.log("üõ† ƒêang x√≥a refreshToken:", refreshToken, "c·ªßa userId:", userId);
    
            const updated = await keytokenModel.updateOne(
                { user: userId },
                { $pull: { refreshTokens: refreshToken } } // Ch·ªâ x√≥a refreshToken c·ª• th·ªÉ
            );
    
            console.log("üîÑ K·∫øt qu·∫£ c·∫≠p nh·∫≠t MongoDB:", updated);
            return updated.modifiedCount > 0; // Tr·∫£ v·ªÅ true n·∫øu c√≥ refreshToken b·ªã x√≥a
        } catch (error) {
            console.error("‚ùå [ERROR] removeRefreshToken:", error);
            return false;
        }
    }
    
    static async findByUserId(userId) {
        try {
            const objectId = new Types.ObjectId(userId);
            const keyToken = await keytokenModel.findOne({ user: objectId });

            if (!keyToken) {
                console.error("‚ùå Kh√¥ng t√¨m th·∫•y KeyStore cho userId:", userId);
                return null;
            }

            return keyToken;
        } catch (error) {
            console.error("‚ùå [ERROR] findByUserId:", error);
            return null;
        }
    }

    static async findByRefreshToken(refreshToken) {
        try {
            const keyToken = await keytokenModel.findOne({ refreshTokens: refreshToken });
            return keyToken;
        } catch (error) {
            console.error("‚ùå [ERROR] findByRefreshToken:", error);
            return null;
        }
    }

    static async updateRefreshToken(userId, newRefreshToken) {
        try {
            await keytokenModel.updateOne(
                { user: userId },
                { $addToSet: { refreshTokens: newRefreshToken } }
            );
            return true;
        } catch (error) {
            console.error("‚ùå [ERROR] updateRefreshToken:", error);
            return false;
        }
    }

    static async removeKeyToken(userId) {
        try {
            console.log("üõ† ƒêang x√≥a KeyToken cho userId:", userId);
    
            const result = await keytokenModel.deleteOne({ user: userId });
    
            if (result.deletedCount === 0) {
                console.error("‚ùå Kh√¥ng th·ªÉ x√≥a KeyToken, c√≥ th·ªÉ ƒë√£ b·ªã x√≥a ho·∫∑c kh√¥ng t·ªìn t·∫°i.");
                return false;
            }
    
            console.log("‚úÖ KeyToken ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng.");
            return true;
        } catch (error) {
            console.error("‚ùå [LOGOUT ERROR] L·ªói khi x√≥a keyToken:", error);
            return false;
        }
    }
    
    
}

module.exports = KeyTokenService;
