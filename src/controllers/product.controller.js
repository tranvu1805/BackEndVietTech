const Product = require("../models/product.model");
const categoryModel = require("../models/category.model");
const e = require("express");
const slugify = require('slugify');
const fs = require('fs');
const path = require("path")
const ExcelJS = require('exceljs')
const ProductService = require("../services/product.service");
const productModel = require("../models/product.model");

const detailsVariantModel = require("../models/detailsVariant.model");
const attributeModel = require("../models/attribute.model");



// üü¢ 1. T·∫°o s·∫£n ph·∫©m m·ªõi
const createProduct = async (req, res) => {
    try {
        let {
            product_name,
            product_description,
            product_price,
            product_stock,
            category,
            combinations,
            variant_prices,
            variant_stocks
        } = req.body;

        const product_thumbnail = req.file ? req.file.path : null;

        console.log('req.body:', req.body);
        console.log('req.file:', req.file);
        console.log('combinations:', combinations);



        try {
            // Parse l·∫°i t·ª´ng combination v√† map gi√°, kho v√†o
            combinations = combinations.map((c, index) => {
                const parsedCombination = JSON.parse(c);

                return {
                    combination: parsedCombination,
                    price: Number(variant_prices[index]),
                    stock: Number(variant_stocks[index])
                };
            });
        } catch (err) {
            return res.status(400).json({
                success: false,
                message: "D·ªØ li·ªáu combinations ho·∫∑c gi√°/kho kh√¥ng h·ª£p l·ªá."
            });
        }
        const attributeMap = {};
        combinations.forEach(combo => {
            Object.entries(combo.combination).forEach(([key, value]) => {
                if (!attributeMap[key]) attributeMap[key] = new Set();
                attributeMap[key].add(value);
            });
        });

        const variant_attributes = Object.entries(attributeMap).map(([key, valueSet]) => ({
            variantName: key,
            values: Array.from(valueSet)
        }));



        // if (!product_name || !product_price || !product_stock || !category) {
        //     return res.status(400).json({ message: 'Thi·∫øu tr∆∞·ªùng b·∫Øt bu·ªôc!' });
        // }


        // if (!product_thumbnail) {
        //     return res.status(400).json({ success: false, message: "Thi·∫øu ·∫£nh ƒë·∫°i di·ªán." });
        // }

        // Parse JSON n·∫øu g·ª≠i t·ª´ form-data
        try {
            if (typeof variant_attributes === 'string') {
                variant_attributes = JSON.parse(variant_attributes);
            }

            if (typeof combinations === 'string') {
                combinations = JSON.parse(combinations);
            }
        } catch (err) {
            return res.status(400).json({
                success: false,
                message: "variant_attributes ho·∫∑c combinations kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng JSON."
            });
        }

        // ‚úÖ T·∫°o s·∫£n ph·∫©m ch√≠nh
        const product = await Product.create({
            product_name,
            product_description,
            product_price,
            product_stock,
            category,
            product_thumbnail
        });

        try {
            // ‚úÖ G·ªçi service ƒë·ªÉ t·∫°o bi·∫øn th·ªÉ v√† t·ªï h·ª£p (c√≥ check tr√πng)
            const { skipped, createdCount, attributeIds } =
                await ProductService.createVariantsAndCombinations(
                    product._id,
                    variant_attributes,
                    combinations,
                    product_name
                );
            console.log("check attributeIds: ", attributeIds);

            product.attributeIds = attributeIds;
            await product.save();
        } catch (variantError) {
            // ‚ùå N·∫øu l·ªói ‚Üí rollback: x√≥a s·∫£n ph·∫©m v·ª´a t·∫°o
            await Product.findByIdAndDelete(product._id);
            return res.status(400).json({
                success: false,
                message: variantError.message || "L·ªói khi t·∫°o bi·∫øn th·ªÉ s·∫£n ph·∫©m."
            });
        }

        return res.status(201).json({
            success: true,
            message: "T·∫°o s·∫£n ph·∫©m th√†nh c√¥ng",
            productId: product._id
        });

    } catch (error) {
        console.error("‚ùå L·ªói t·∫°o s·∫£n ph·∫©m:", error);
        return res.status(500).json({ success: false, message: error.message });
    }
};





// üü¢ 2. L·∫•y danh s√°ch s·∫£n ph·∫©m (h·ªó tr·ª£ l·ªçc & ph√¢n trang)
const getAllProducts = async (req, res) => {
    try {
        const {
            category,
            search,
            minPrice,
            maxPrice,
            sort,
            // page = 1,
            // limit = 10,
            variant_filters // JSON string: [{"name":"M√†u s·∫Øc","value":"Tr·∫Øng"}, ...]
        } = req.query;

        const matchProduct = { isPulished: true };

        if (category) matchProduct.category = category;
        if (search) matchProduct.product_name = new RegExp(search, "i");
        if (minPrice || maxPrice) {
            matchProduct.product_price = {};
            if (minPrice) matchProduct.product_price.$gte = parseFloat(minPrice);
            if (maxPrice) matchProduct.product_price.$lte = parseFloat(maxPrice);
        }

        // ‚úÖ L·ªçc theo t·ªï h·ª£p bi·∫øn th·ªÉ
        if (variant_filters) {
            let parsedFilters;
            try {
                parsedFilters = JSON.parse(variant_filters);
            } catch (err) {
                return res.status(400).json({ success: false, message: "variant_filters ph·∫£i l√† JSON h·ª£p l·ªá" });
            }

            const matchConditions = [];

            for (const filter of parsedFilters) {
                const variant = await attributeModel.findOne({ name: filter.name });
                if (variant) {
                    matchConditions.push({
                        variantDetails: {
                            $elemMatch: {
                                variantId: variant._id,
                                value: filter.value
                            }
                        }
                    });
                }
            }

            const matchingVariants = await detailsVariantModel.find({ $and: matchConditions });

            const productIds = matchingVariants.map(item => item.productId);

            if (productIds.length === 0) {
                return res.status(200).json({ success: true, products: [] });
            }

            matchProduct._id = { $in: productIds };
        }


        let sortOption = {};
        switch (sort) {
            case "price_asc":
                sortOption.product_price = 1;
                break;
            case "price_desc":
                sortOption.product_price = -1;
                break;
            case "name_asc":
                sortOption.product_name = 1;
                break;
            case "name_desc":
                sortOption.product_name = -1;
                break;
            case "stock_asc":
                sortOption.product_stock = 1;
                break;
            case "stock_desc":
                sortOption.product_stock = -1;
                break;
            default:
                sortOption.createdAt = -1;
        }


        // ‚úÖ Truy v·∫•n danh s√°ch s·∫£n ph·∫©m
        const products = await Product.find(matchProduct)
            .populate("category")
            .sort(sortOption);
        // .skip((page - 1) * limit)
        // .limit(Number(limit));

        res.status(200).json({ success: true, products });
    } catch (error) {
        console.error("‚ùå L·ªói getAllProducts:", error.message);
        res.status(500).json({ success: false, message: error.message });
    }
};


const getAllProducts_Admin = async (req, res) => {
    try {
        const {
            category,
            search,
            name,
            status,
            stock,
            minPrice,
            maxPrice,
            page = 1,
            limit = 5,
            sort
        } = req.query;

        let filter = {};

        // L·ªçc theo danh m·ª•c
        if (category) filter.category = category;

        // T√¨m ki·∫øm theo t√™n s·∫£n ph·∫©m (kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng)
        if (name || search) {
            filter.product_name = new RegExp(name || search, "i");
        }

        if (stock) {
            if (stock === 'high') filter.product_stock = { $gt: 50 };
            else if (stock === 'medium') filter.product_stock = { $gt: 10, $lte: 50 };
            else if (stock === 'low') filter.product_stock = { $lte: 10 };
        }


        // L·ªçc theo gi√°
        if (minPrice || maxPrice) {
            filter.product_price = {};
            if (minPrice) filter.product_price.$gte = parseFloat(minPrice);
            if (maxPrice) filter.product_price.$lte = parseFloat(maxPrice);
        }

        if (status) {
            if (status === 'active') {
                filter.isPulished = true;
                filter.isDraft = false;
            } else if (status === 'inactive') {
                filter.isPulished = false;
                filter.isDraft = false;
            } else if (status === 'draft') {
                filter.isDraft = true;
            }
        }

        // L·ªçc theo bi·∫øn th·ªÉ
        // if (variant_name && variant_value) {
        //     filter.variations = {
        //         $elemMatch: {
        //             variant_name: variant_name,
        //             variant_value: variant_value
        //         }
        //     };
        // }

        // ƒê·∫øm t·ªïng s·ªë s·∫£n ph·∫©m (ph·ª•c v·ª• ph√¢n trang)
        const totalCount = await Product.countDocuments(filter);
        const totalPages = Math.ceil(totalCount / limit);

        let sortOption = {};
        if (sort === 'price_asc') sortOption.product_price = 1;
        else if (sort === 'price_desc') sortOption.product_price = -1;
        else if (sort === 'stock_asc') sortOption.product_stock = 1;
        else if (sort === 'stock_desc') sortOption.product_stock = -1;

        const products = await Product.find(filter)
            .sort(sortOption) // üëà th√™m d√≤ng n√†y
            .populate("category")
            .populate("attributeIds")
            .skip((page - 1) * limit)
            .limit(Number(limit));


        const cleanedProducts = products.map(product => {
            product.attributeIds = product.attributeIds?.filter(attr => attr && Array.isArray(attr.values));
            return product;
        });


        return { products: cleanedProducts, totalPages, currentPage: Number(page), totalCount };
    } catch (error) {
        console.error("Error getAllProducts_Admin:", error);
        return {
            products: [],
            total: 0,
            currentPage: 1,
            totalPages: 1,
            error: error.message
        };
    }
};



// üü¢ 3. L·∫•y chi ti·∫øt s·∫£n ph·∫©m
const getProductById = async (req, res) => {
    try {
        const product = await Product.findById(req.params.id).populate("category");

        if (!product) {
            return res.status(404).json({ success: false, message: "Product not found" });
        }

        // L·∫•y chi ti·∫øt thu·ªôc t√≠nh t·ª´ attributeIds
        const attributes = await attributeModel.find({
            _id: { $in: product.attributeIds }
        });

        // L·∫•y danh s√°ch bi·∫øn th·ªÉ t·ª´ b·∫£ng detailsVariantModel
        const variants = await detailsVariantModel.find({ productId: product._id }).lean();

        // L·∫•y bi·∫øn th·ªÉ ƒë·∫ßu ti√™n l√†m m·∫∑c ƒë·ªãnh n·∫øu c√≥
        const default_variant = variants.length > 0 ? variants[0] : null;

        return res.status(200).json({
            success: true,
            product,
            attributes,
            variants,
            default_variant
        });
    } catch (error) {
        console.log("‚ùå getProductById error:", error.message);
        res.status(500).json({ success: false, message: error.message });
    }
};


const getProductById_Admin = async (id) => {
    try {
        const product = await Product.findById(id).populate("category");
        return product || null;
    } catch (error) {
        console.error("Error fetching product:", error.message);
        return null;
    }
};

const toggleProductStatus_Admin = async (req, res) => {
    try {
        const product = await Product.findById(req.params.id);
        if (!product) return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" });

        if (product.isDraft) {
            // Chuy·ªÉn t·ª´ b·∫£n nh√°p sang c√¥ng khai
            product.isDraft = false;
            product.isPulished = true;
        } else {
            // Chuy·ªÉn t·ª´ c√¥ng khai sang b·∫£n nh√°p
            product.isDraft = true;
            product.isPulished = false;
        }

        await product.save();

        return res.status(200).json({
            success: true,
            message: product.isDraft ? "ƒê√£ chuy·ªÉn sang B·∫£n nh√°p" : "ƒê√£ chuy·ªÉn sang Hi·ªÉn th·ªã",
            product
        });
    } catch (error) {
        return res.status(500).json({ success: false, message: error.message });
    }
};



// üü¢ 4. C·∫≠p nh·∫≠t s·∫£n ph·∫©m
const updateProduct = async (req, res) => {
    try {
        let {
            product_name,
            product_description,
            product_price,
            product_stock,
            category,
            combinations,
            variant_prices,
            variant_stocks,
            isDraft,
            isPulished,
        } = req.body;

        const product_thumbnail = req.file ? req.file.path : undefined;

        // T√¨m s·∫£n ph·∫©m
        const product = await Product.findById(req.params.id);
        if (!product) {
            return res.status(404).json({ success: false, message: "Product not found" });
        }

        // C·∫≠p nh·∫≠t th√¥ng tin c∆° b·∫£n
        product.product_name = product_name;
        product.product_description = product_description;
        product.product_price = product_price;
        product.product_stock = product_stock;
        product.category = category;
        if (product_thumbnail) product.product_thumbnail = product_thumbnail;

        if (combinations && variant_prices && variant_stocks) {
            try {
                // Parse l·∫°i combinations t·ª´ JSON
                combinations = combinations.map((c, index) => {
                    const parsedCombination = JSON.parse(c);
                    return {
                        combination: parsedCombination,
                        price: Number(variant_prices[index]),
                        stock: Number(variant_stocks[index])
                    };
                });
            } catch (err) {
                return res.status(400).json({
                    success: false,
                    message: "D·ªØ li·ªáu combinations ho·∫∑c gi√°/kho kh√¥ng h·ª£p l·ªá."
                });
            }

            // T·∫°o l·∫°i variant_attributes
            const attributeMap = {};
            combinations.forEach(combo => {
                Object.entries(combo.combination).forEach(([key, value]) => {
                    if (!attributeMap[key]) attributeMap[key] = new Set();
                    attributeMap[key].add(value);
                });
            });

            const variant_attributes = Object.entries(attributeMap).map(([key, valueSet]) => ({
                variantName: key,
                values: Array.from(valueSet)
            }));

            try {
                // Xo√° bi·∫øn th·ªÉ c≈©
                await detailsVariantModel.deleteMany({ productId: product._id });

                // T·∫°o l·∫°i bi·∫øn th·ªÉ m·ªõi
                const { attributeIds } = await ProductService.createVariantsAndCombinations(
                    product._id,
                    variant_attributes,
                    combinations,
                    product_name
                );

                product.attributeIds = attributeIds;
            } catch (err) {
                return res.status(400).json({
                    success: false,
                    message: "L·ªói khi c·∫≠p nh·∫≠t bi·∫øn th·ªÉ: " + err.message
                });
            }
        }
        product.isDraft = isDraft === 'on';
        product.isPulished = isPulished === 'on';


        await product.save();
        return res.status(200).json({
            success: true,
            message: "C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng",
            product
        });
    } catch (error) {
        console.error("‚ùå L·ªói updateProduct:", error);
        return res.status(500).json({ success: false, message: error.message });
    }
};


// üü¢ 5. X√≥a s·∫£n ph·∫©m
const deleteProduct = async (req, res) => {
    try {
        const deletedProduct = await Product.findByIdAndDelete(req.params.id);
        if (!deletedProduct) {
            return res.status(404).json({ success: false, message: "Product not found" });
        }
        res.status(200).json({ success: true, message: "Product deleted successfully" });
    } catch (error) {
        res.status(500).json({ success: false, message: error.message });
    }
};

// üü¢ 6. Xu·∫•t s·∫£n ph·∫©m qua excel
const exportProductsToExcel = async (req, res, next) => {
    try {
        const products = await ProductService.getAllProducts(); // L·∫•y danh s√°ch s·∫£n ph·∫©m t·ª´ DB

        const workbook = new ExcelJS.Workbook();
        // Th√™m th√¥ng tin metadata cho file
        workbook.creator = 'H·ªá th·ªëng qu·∫£n l√Ω s·∫£n ph·∫©m';
        workbook.lastModifiedBy = 'H·ªá th·ªëng';
        workbook.created = new Date();
        workbook.modified = new Date();

        const worksheet = workbook.addWorksheet('Danh s√°ch s·∫£n ph·∫©m', {
            properties: {
                tabColor: { argb: '3D85C6' } // M√†u tab xanh d∆∞∆°ng
            },
            pageSetup: {
                paperSize: 9, // A4
                orientation: 'landscape',
                fitToPage: true
            }
        });

        // ƒê·ªãnh nghƒ©a c√°c c·ªôt trong file Excel v·ªõi ki·ªÉu d·ªØ li·ªáu
        worksheet.columns = [
            { header: 'ID', key: 'product_id', width: 10 },
            { header: 'T√™n s·∫£n ph·∫©m', key: 'product_name', width: 30 },
            { header: '·∫¢nh ƒë·∫°i di·ªán', key: 'product_thumbnail', width: 40 },
            { header: 'M√¥ t·∫£', key: 'product_description', width: 50 },
            { header: 'Gi√° (‚Ç´)', key: 'product_price', width: 15, style: { numFmt: '#,##0' } },
            { header: 'Kho', key: 'product_stock', width: 10 },
            { header: 'Danh m·ª•c', key: 'category', width: 20 },
            { header: 'Thu·ªôc t√≠nh', key: 'product_attributes', width: 40 },
            { header: 'ƒê√°nh gi√° TB', key: 'product_ratingsAverage', width: 15, style: { numFmt: '0.0' } },
            { header: 'Slug', key: 'product_slug', width: 30 },
            { header: 'B·∫£n nh√°p?', key: 'isDraft', width: 10 },
            { header: 'ƒê√£ xu·∫•t b·∫£n?', key: 'isPulished', width: 15 },
            { header: 'Bi·∫øn th·ªÉ', key: 'variations', width: 60 }
        ];

        // T·∫°o style cho header
        const headerRow = worksheet.getRow(1);
        headerRow.height = 30; // ƒêi·ªÅu ch·ªânh chi·ªÅu cao h√†ng ti√™u ƒë·ªÅ
        headerRow.font = {
            name: 'Arial',
            size: 12,
            bold: true,
            color: { argb: 'FFFFFF' } // M√†u ch·ªØ tr·∫Øng
        };
        headerRow.fill = {
            type: 'pattern',
            pattern: 'solid',
            fgColor: { argb: '4472C4' } // M√†u n·ªÅn xanh d∆∞∆°ng ƒë·∫≠m
        };
        headerRow.alignment = {
            vertical: 'middle',
            horizontal: 'center',
            wrapText: true
        };

        // Th√™m d·ªØ li·ªáu v√†o t·ª´ng d√≤ng v·ªõi format
        products.forEach((product, index) => {
            const rowIndex = index + 2; // B·∫Øt ƒë·∫ßu t·ª´ h√†ng 2 (sau header)

            // Format thu·ªôc t√≠nh s·∫£n ph·∫©m th√†nh c·∫•u tr√∫c d·ªÖ ƒë·ªçc
            let formattedAttributes = '';
            if (product.product_attributes && Object.keys(product.product_attributes).length > 0) {
                formattedAttributes = Object.entries(product.product_attributes)
                    .map(([key, value]) => {
                        // Format key name to be more readable (e.g., battery_life -> Battery Life)
                        const formattedKey = key
                            .split('_')
                            .map(word => word.charAt(0).toUpperCase() + word.slice(1))
                            .join(' ');
                        return `‚Ä¢ ${formattedKey}: ${value}`;
                    })
                    .join('\n');
            }

            // Format bi·∫øn th·ªÉ s·∫£n ph·∫©m th√†nh c·∫•u tr√∫c d·ªÖ ƒë·ªçc
            let formattedVariations = '';
            if (product.variations && product.variations.length > 0) {
                formattedVariations = product.variations
                    .map((variant, i) => {
                        return `‚Ä¢ Bi·∫øn th·ªÉ ${i + 1}: ${variant.variant_name} ${variant.variant_value}\n  - Gi√°: ${variant.price.toLocaleString()}‚Ç´\n  - Kho: ${variant.stock}\n  - SKU: ${variant.sku}`;
                    })
                    .join('\n\n');
            }

            const row = worksheet.addRow({
                product_id: product._id?.toString() || '',
                product_name: product.product_name,
                product_thumbnail: product.product_thumbnail,
                product_description: product.product_description || '',
                product_price: product.product_price,
                product_stock: product.product_stock,
                category: product.category?.name || '',
                product_attributes: formattedAttributes,
                product_ratingsAverage: product.product_ratingsAverage,
                product_slug: product.product_slug,
                isDraft: product.isDraft ? 'C√≥' : 'Kh√¥ng',
                isPulished: product.isPulished ? 'C√≥' : 'Kh√¥ng',
                variations: formattedVariations
            });

            // Thi·∫øt l·∫≠p ƒë·ªãnh d·∫°ng h√†ng
            row.height = 25 * Math.max(
                1,
                (formattedAttributes.split('\n').length || 1),
                (formattedVariations.split('\n').length || 1) / 2
            ); // TƒÉng chi·ªÅu cao h√†ng d·ª±a tr√™n s·ªë d√≤ng trong thu·ªôc t√≠nh v√† bi·∫øn th·ªÉ

            // ƒê·∫£m b·∫£o c√°c √¥ trong c·ªôt thu·ªôc t√≠nh v√† bi·∫øn th·ªÉ ƒë∆∞·ª£c wrap text v√† cƒÉn ƒë·ªÅu
            worksheet.getCell(`H${rowIndex}`).alignment = {
                vertical: 'top',
                wrapText: true
            };

            worksheet.getCell(`M${rowIndex}`).alignment = {
                vertical: 'top',
                wrapText: true
            };

            // ƒê·ªãnh d·∫°ng hi·ªÉn th·ªã cho c√°c c·ªôt kh√°c
            row.alignment = {
                vertical: 'middle',
                wrapText: true
            };

            // ƒê·ªãnh d·∫°ng m√†u n·ªÅn xen k·∫Ω cho d·ªÖ ƒë·ªçc
            if (index % 2 === 0) {
                row.fill = {
                    type: 'pattern',
                    pattern: 'solid',
                    fgColor: { argb: 'F2F2F2' } // M√†u x√°m nh·∫°t
                };
            }

            // ƒê·ªãnh d·∫°ng cho c·ªôt gi√° v√† c·ªôt bi·∫øn th·ªÉ
            worksheet.getCell(`E${rowIndex}`).numFmt = '#,##0'; // ƒê·ªãnh d·∫°ng s·ªë cho c·ªôt gi√°
            worksheet.getCell(`I${rowIndex}`).numFmt = '0.0'; // ƒê·ªãnh d·∫°ng s·ªë th·∫≠p ph√¢n cho c·ªôt ƒë√°nh gi√°

            // ƒê·ªãnh d·∫°ng cho c·ªôt tr·∫°ng th√°i
            const isDraftCell = worksheet.getCell(`K${rowIndex}`);
            const isPublishedCell = worksheet.getCell(`L${rowIndex}`);

            // ƒê·ªïi m√†u cho tr·∫°ng th√°i
            isDraftCell.alignment = { horizontal: 'center', vertical: 'middle' };
            isPublishedCell.alignment = { horizontal: 'center', vertical: 'middle' };

            if (product.isDraft) {
                isDraftCell.font = { bold: true, color: { argb: 'FF0000' } }; // M√†u ƒë·ªè ƒë·∫≠m
            } else {
                isDraftCell.font = { color: { argb: '006100' } }; // M√†u xanh l√°
            }

            if (product.isPulished) {
                isPublishedCell.font = { bold: true, color: { argb: '006100' } }; // M√†u xanh l√° ƒë·∫≠m
            } else {
                isPublishedCell.font = { bold: true, color: { argb: 'FF0000' } }; // M√†u ƒë·ªè ƒë·∫≠m
            }
        });

        // Th√™m vi·ªÅn cho t·∫•t c·∫£ c√°c √¥ c√≥ d·ªØ li·ªáu
        const allCells = worksheet.getRows(1, products.length + 1);
        allCells.forEach(row => {
            row.eachCell({ includeEmpty: true }, cell => {
                cell.border = {
                    top: { style: 'thin' },
                    left: { style: 'thin' },
                    bottom: { style: 'thin' },
                    right: { style: 'thin' }
                };
            });
        });

        // ƒê·∫∑t filter cho header ƒë·ªÉ d·ªÖ t√¨m ki·∫øm
        worksheet.autoFilter = {
            from: { row: 1, column: 1 },
            to: { row: 1, column: worksheet.columns.length }
        };

        // C·ªë ƒë·ªãnh h√†ng ƒë·∫ßu ti√™n khi cu·ªôn
        worksheet.views = [
            { state: 'frozen', xSplit: 0, ySplit: 1, activeCell: 'A2' }
        ];

        // T·∫°o th∆∞ m·ª•c xu·∫•t n·∫øu ch∆∞a t·ªìn t·∫°i
        const exportDir = path.join(__dirname, '../../exports');
        if (!fs.existsSync(exportDir)) {
            fs.mkdirSync(exportDir, { recursive: true });
        }

        // T·∫°o t√™n file c√≥ timestamp ƒë·ªÉ tr√°nh tr√πng l·∫∑p
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const fileName = `products_export_${timestamp}.xlsx`;
        const filePath = path.join(exportDir, fileName);

        await workbook.xlsx.writeFile(filePath);
        return res.download(filePath, fileName, (err) => {
            if (err) {
                next(err);
            } else {
                // T√πy ch·ªçn: X√≥a file sau khi ƒë√£ t·∫£i xu·ªëng ƒë·ªÉ ti·∫øt ki·ªám dung l∆∞·ª£ng
                // setTimeout(() => fs.unlinkSync(filePath), 5000);
            }
        });
    } catch (error) {
        console.error('‚ùå L·ªói xu·∫•t Excel:', error);
        return next(error);
    }
};

// üü¢ 7. L·ªçc s·∫£n ph·∫©m theo Danh M·ª•c
const getProductsByCategory = async (req, res) => {
    try {
        const { categoryId } = req.params;
        const products = await ProductService.findByCategory(categoryId);

        return res.status(200).json({
            message: "L·∫•y s·∫£n ph·∫©m theo danh m·ª•c th√†nh c√¥ng",
            metadata: products
        });
    } catch (error) {
        return res.status(500).json({
            message: "L·ªói khi l·∫•y s·∫£n ph·∫©m theo category",
            error
        });
    }
};

const getTopSellingProducts = async (req, res) => {
    try {
        const result = await ProductService.getTopSellingProducts(); // g·ªçi service x·ª≠ l√Ω logic
        return res.status(200).json(result);
    } catch (error) {
        console.error("üî• L·ªói khi l·∫•y top s·∫£n ph·∫©m b√°n ch·∫°y:", error);
        return res.status(500).json({ message: "Internal server error", error: error.message || error });
    }
};


module.exports = {
    createProduct,
    getAllProducts,
    getProductById,
    updateProduct,
    deleteProduct,
    getAllProducts_Admin,
    getProductById_Admin,
    exportProductsToExcel,
    getProductsByCategory,
    getTopSellingProducts,
    toggleProductStatus_Admin
};
